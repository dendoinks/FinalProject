<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:context=".beginner"
    tools:showIn="@layout/activity_beginner">

    <LinearLayout
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <!-- DITO ILALAGAY YUNG CONTENT NG BEGINNER SHIT -->
        <!-- PALITAN NIYO NALANG YANG NASA BABA -->
        <!-- YUNG ILALAGAY NASA DC -->

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Java Syntax"
            android:textSize="24dp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="360dp"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:text="\n\t\tDescription of the topic: Java Syntax is a basic of the language, all the main rules, commands, constructions to write programs that the compiler and computer “understands”. Every programming language has its syntax as well as human language.
            \n\nExample: \npublic class Main {public static void main(String[] args){ \n\t\tSystem.out.println(''Hello World'');\n}\n"
            android:textColor="@color/black"
            android:textSize="16dp" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Java Output"
            android:textSize="24dp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="360dp"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:text="\n\t\tDescription of the topic: Java output refers to the information a program displays to the user or external systems. The primary mechanism for output in Java is the System.out.println() method, which prints data to the console. This allows developers to communicate results, messages, or variables during program execution. Output can include text, numbers, or any other data that needs to be conveyed from the program to the user or external components.
            \n\nExample: \nSystem.out.println(”Hello World!”);\n\nYou can add as many println() methods as you want. Note that it will add a new line for each method:
            \nSystem.out.println(”Hello World!”);
            \nSystem.out.println(”I am learning Java.”);
            \nSystem.out.println(”It is fun!”);
            \nNote: When you are working with text, it must be wrapped inside double quotation marks ” ”. If you forget the double quotes, an error occurs.
            \nAdditional Information: There is also a print() method, which is similar to println(). The only difference is that it does not insert a new line at the end of the output:
            \nExample:
            \nSystem.out.print(”Hello World! ”);
            \nSystem.out.print(”I will print on the same line.”);
            \n}\n"
            android:textColor="@color/black"
            android:textSize="16dp" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Java Comments"
            android:textSize="24dp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="360dp"
            android:layout_height="wrap_content"
            android:text="Description of the topic: A Java comment is a non-executable piece of text within the code used for explanation or clarification. Comments help programmers understand the code by providing context or details. In Java, comments are ignored during program execution. Single-line comments start with '//', and multi-line comments are enclosed between '/' and '/.' Using comments improves code readability and aids collaboration among developers.
            \nExample:
            \n[Single-line Comments]
            \n// This is a comment
            \nSystem.out.println(”Hello World”);
            \nSystem.out.println(”Hello World”); // This is a comment
            \n[Multi-line comments]
            \n/* The code below will print the words Hello World
            \nto the screen, and it is amazing */
            \nSystem.out.println(”Hello World”);
            \nActivity: Insert the missing part to create two types of comments.
            \n[] This is a single-line comment
            \n[] This is a multi-line comment []"
            android:textSize="16dp"
            android:textColor="@color/black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Java Reports"
            android:textSize="24dp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="360dp"
            android:layout_height="wrap_content"
            android:text="Description of the topic: Variables are containers for storing data values. In Java, there are different types of variables, for example:
            \n\nString - stores text, such as ”Hello”. String values are surrounded by double quotes
            \n\nint - stores integers (whole numbers), without decimals, such as 123 or -123
            \n\nfloat - stores floating point numbers, with decimals, such as 19.99 or -19.99
            \n\nchar - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
            \n\nboolean - stores values with two states: true or false
            \n\nDeclaring (Creating) Variables
            \nTo create a variable, you must specify the type and assign it a value:
            \n\ntype variableName = value;
            \nWhere type is one of Java's types (such as int or String), and variableName is the name of the variable (such as x or name). The equal sign is used to assign values to the variable.
            \nTo create a variable that should store text, look at the following example:
            \n\nExample:
            \n\nCreate a variable called name of type String and assign it the value ”Jose”:
            \n\nString name = ”Jose”;
            \nSystem.out.println(name);
            \n\nCreate a variable called myNum of type int and assign it the value 12:
            \n\nint myNum = 12;
            \nSystem.out.println(myNum);
            \n\nYou can also declare a variable without assigning the value, and assign the value later:
            \n\nint myNum;
            \nmyNum = 15;
            \nSystem.out.println(myNum);
            \n\nChange the value of myNum from 15 to 20:
            \n\nint myNum = 15;
            \n\nmyNum = 20;  // myNum is now 20
            \n\nSystem.out.println(myNum);
            \n\nIf you don't want others (or yourself) to overwrite existing values, use the final keyword (this will declare the variable as ”final” or ”constant”, which means unchangeable and read-only):
            \nfinal int myNum = 15;
            \nmyNum = 20;  // will generate an error: cannot assign a value to a final variable
            \n\nOther Types
            \n\nA demonstration of how to declare variables of other types:
            \n\nint myNum = 5;
            \nfloat myFloatNum = 5.99f;
            \nchar myLetter = 'D';
            \nboolean myBool = true;
            \nString myText = ”Hello”;
            \n\nActivity:
            \nCreate a variable named carName and assign the value Volvo to it
            \n[       ]      [    ] = [         ];"
            android:textSize="16dp"
            android:textColor="@color/black"
            android:layout_gravity="center"/>





    </LinearLayout>

</androidx.core.widget.NestedScrollView>