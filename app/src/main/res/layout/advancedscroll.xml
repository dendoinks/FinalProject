<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:context=".advanced"
    tools:showIn="@layout/activity_advanced">

    <LinearLayout
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <!-- DITO ILALAGAY YUNG CONTENT NG BEGINNER SHIT -->
        <!-- PALITAN NIYO NALANG YANG NASA BABA -->
        <!-- YUNG ILALAGAY NASA DC -->


        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="JAVA OOP"
            android:textSize="24sp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="380dp"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:text="\n\tDescription of the topic: OOP stands for Object-Oriented Programming.\n\nProcedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.\n\nObject-oriented programming has several advantages over procedural programming:\n\n
OOP is faster and easier to execute\nOOP provides a clear structure for the programs\nOOP helps to keep the Java code DRY ”Don't Repeat Yourself”, and makes the code easier to maintain, modify and debug\nOOP makes it possible to create full reusable applications with less code and shorter development time."
            android:textColor="@color/black"
            android:textSize="16sp" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="JAVA CLASSES AND OBJECTS"
            android:textSize="24sp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="380dp"
            android:layout_height="wrap_content"
            android:text="\t\nDescription of the topic: A Class is like an object constructor, or a ”blueprint” for creating objects. In Java, an object is created from a class. We have already created the class named Main, so now we can use this to create objects.\n\n\nExample:\n
Create a class named ”Main” with a variable x:\n\n

public class Main {\n
  int x = 5;\n
}\n\nCreate an object called ”myObj” and print the value of x:\n\n public class Main {\nint x = 5;\n\npublic static void main(String[] args) {\n
    Main myObj = new Main();\n
    System.out.println(myObj.x)\n\nActivity:\nExercise:\nCreate an object of MyClass called myObj.\n\n


[       ]  [     ] = new [        ] ();\n\n
"
            android:textSize="16sp"
            android:textColor="@color/black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="JAVA ENCAPSULATION"
            android:textSize="24sp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="380dp"
            android:layout_height="wrap_content"
            android:text="\t\nDescription of the topic: The meaning of Encapsulation, is to make sure that ”sensitive” data is hidden from users. To achieve this, you must:\n\n

declare class variables/attributes as private\n
provide public get and set methods to access and update the value of a private variable.\n\n

Get and Set\n
You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods.\n\n

The get method returns the variable value, and the set method sets the value.\n\n

Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case:\n\n

Example\n
public class Person {\n
  private String name; // private = restricted access\n\n

  // Getter\n
  public String getName() {\n
    return name;\n
  }\n\n

  // Setter\n
  public void setName(String newName) {\n
    this.name = newName;\n
  }\n
}\n\n

Example explained\n
The get method returns the value of the variable name.\n\n

The set method takes a parameter (newName) and assigns it to the name variable. The this keyword is used to refer to the current object.\n\n

However, as the name variable is declared as private, we cannot access it from outside this class:\n\n"
            android:textSize="16sp"
            android:textColor="@color/black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Exercise: Student Information System"
            android:textSize="20sp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="380dp"
            android:layout_height="wrap_content"
            android:text="\t\nObjective:\n\n
Create a simple Student class that encapsulates student information and includes methods for accessing and modifying the information.\n\n

Requirements:\n
Create a Student Class:\n

Implement a Student class with the following private attributes:\n
name (String): representing the student's name.\n
age (int): representing the student's age.\n
grade (double): representing the student's grade point average.\n
Encapsulate the Attributes:\n\n

Use encapsulation to ensure that the attributes can only be accessed and modified through public methods.
Provide Setter and Getter Methods:\n\n

Implement public setter methods (setName, setAge, setGrade) to set the values of the attributes.\n
Implement public getter methods (getName, getAge, getGrade) to retrieve the values of the attributes.\n
Validate Input:\n\n

In the setter methods, include basic validation:\n
Ensure that the age is a positive integer.\n
Ensure that the grade is within the valid range (0.0 to 4.0).\n
Display Information Method:\n\n

Implement a public method called displayInfo that prints the student's information.\n
Test the Class:\n\n

Create an instance of the Student class in a separate class (e.g., a Main class).\n
Use the setter methods to set the student's information.\n
Use the getter methods to retrieve and display the student's information.\n
Test the validation by providing invalid input.\n\n"
            android:textSize="16sp"
            android:textColor="@color/black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Example Usage"
            android:textSize="24sp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>


        <ImageView
            android:layout_width="400dp"
            android:layout_height="350dp"
            android:layout_gravity="center"
            android:src="@drawable/dulilah8" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Submission Guidelines:"
            android:textSize="24sp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="380dp"
            android:layout_height="wrap_content"
            android:text="\t\nEncourage students to create a Student class following the exercise requirements.\n
The Main class should demonstrate the use of the Student class by creating an instance, setting information, and displaying the results.\n
Students should consider how encapsulation helps maintain the integrity of the student data.\n
This exercise aims to reinforce the concept of encapsulation in Java and provides a practical scenario where encapsulation can be beneficial in managing and validating data.\n\n"
            android:textSize="16sp"
            android:textColor="@color/black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="JAVA INHERITANCE"
            android:textSize="24sp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="380dp"
            android:layout_height="wrap_content"
            android:text="\t\nDescription of the topic: Inheritance in Java is the method to create a hierarchy between classes by inheriting from other classes.\n\n

In Java, it is possible to inherit attributes and methods from one class to another. We group the ”inheritance concept” into two categories:\n\n

subclass (child) - the class that inherits from another class\n
superclass (parent) - the class being inherited from\n
To inherit from a class, use the extends keyword.\n\n

EXAMPLE:\n
In the example below, the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass):
"
            android:textSize="16sp"
            android:textColor="@color/black"
            android:layout_gravity="center"/>

        <ImageView
            android:layout_width="400dp"
            android:layout_height="350dp"
            android:src="@drawable/alham9"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Java Inheritance Exercise: Shape Hierarchy"
            android:textSize="24sp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="380dp"
            android:layout_height="wrap_content"
            android:text="\t\nObjective:\n
Design a simple hierarchy of shapes using Java inheritance. Create a base class Shape and derive various shapes such as Circle, Rectangle, and Triangle from it.\n\n

Requirements:\n
Create a Shape Class:\n\n

Implement a base class named Shape with the following attributes:\n
color (String): representing the color of the shape.\n
filled (boolean): indicating whether the shape is filled with color.\n
Implement Derived Classes:\n\n

Create three derived classes: Circle, Rectangle, and Triangle.\n
Each derived class should inherit from the Shape class.\n
Add Shape-specific Attributes:\n\n

For each derived class, add attributes specific to that shape. For example:\n
Circle should have a radius.\n
Rectangle should have width and height.\n
Triangle should have side1, side2, and side3.\n
Encapsulate Attributes:\n\n

Encapsulate the attributes of the base and derived classes using access modifiers.\n
Provide Constructors:\n\n

Implement constructors for each class to initialize their attributes.\n
Implement Methods:\n\n

In the Shape class, provide a method calculateArea() that returns the area of the shape (for simplicity, you can assume all shapes are 2D).\n
Override the calculateArea() method in each derived class to provide shape-specific calculations.\n
Test the Classes:\n\n

Create instances of each shape class in a separate Main class.\n
Set their attributes and call the calculateArea() method to display the area.\n
"
            android:textSize="16sp"
            android:textColor="@color/black"
            android:layout_gravity="center"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Example Usage"
            android:textSize="24sp"
            android:textColor="@color/black"
            android:textStyle="bold"
            android:fontFamily="sans-serif-black"
            android:layout_gravity="center"/>

        <ImageView
            android:layout_width="400dp"
            android:layout_height="350dp"
            android:src="@drawable/dulilah10"
            android:layout_gravity="center"/>


    </LinearLayout>

</androidx.core.widget.NestedScrollView>